void DLL_EXPORT sgpi_rectangle(
            SGPI_Rectangle input,
            PropertyPolygon appearance)
{
    for (GLuint i = 0; i < 4; i++)
    {
        if (!is_GLfloat_between(input.angle[i], MinAngle, true,
                                MaxAngle, true, GLfloatValidValue))
        {
            return;
        }
    }

    GLboolean smooth;
    smooth = is_line_smooth();
    if (smooth != appearance.polygonSmooth)
    {
        sgpi_antialias(appearance.polygonSmooth);
    }

    sgpi_line_cap(appearance.lineCap);

    if (appearance.textureControl && appearance.texture.id != -1)
    {
        if (appearance.modulate && appearance.filling)
        {
            sgpi_rgba_color(appearance.fillColor);
        }
        else
        {
            sgpi_rgba_color(whiteColor);
        }
        draw_rectangle_texture(input, appearance.texture, appearance.tessellate);
    }

    // 1/3 filled
    GLfloat lineWidth;
    if (appearance.filling && !appearance.textureControl)
    {
        appearance.fillColor.alpha = appearance.fillOpacity;
        sgpi_rgba_color(appearance.fillColor);

        lineWidth = appearance.lineWidth.line;
        sgpi_line_width(lineWidth);
        generate_rectangle(lineWidth / get_screen_max_size(), input, true);
        glFlush();
        glFinish();
    }

    // 2/3 halo and 3/3 outlined
    sgpi_line_stipple(appearance.lineStipple);
    Point secondPoint;
    secondPoint.x = input.thirdPoint.x;
    secondPoint.y = input.firstPoint.y;
    Point fourthPoint;
    fourthPoint.x = input.firstPoint.x;
    fourthPoint.y = input.thirdPoint.y;
    Point point[] = {input.firstPoint, secondPoint, input.thirdPoint, fourthPoint};
    if (appearance.haloing)
    {
        // halo
        lineWidth = appearance.lineWidth.color;
        sgpi_line_width(lineWidth);
        sgpi_rgba_color(appearance.haloColor);

        glBegin(GL_LINE_STRIP);
        generate_rectangle(0.F, input, false);
        glEnd();

        if (is_GLfloat_more(lineWidth, 1, false, GLfloatValidValue))
            sgpi_line_join(LineCorner_Bevel, true, point,
                                   4, lineWidth / get_screen_max_size());
        glFinish();
        // outlined
        lineWidth = appearance.lineWidth.halo;
    }
    else
    {
        lineWidth = appearance.lineWidth.line;
    }
    sgpi_line_width(lineWidth);
    appearance.outlineColor.alpha = appearance.outlineOpacity;
    sgpi_rgba_color(appearance.outlineColor);

    glBegin(GL_LINE_STRIP);
    generate_rectangle(0.F, input, false);
    glEnd();

    if (is_GLfloat_more(lineWidth, 1, false, GLfloatValidValue))
        sgpi_line_join(LineCorner_Bevel, true, point,
                               4, lineWidth / get_screen_max_size());
    glFinish();

    if (glIsEnabled(GL_LINE_STIPPLE))
    {
        glDisable(GL_LINE_STIPPLE);
    }

    if (smooth != appearance.polygonSmooth)
    {
        sgpi_antialias(smooth);
    }
} // sgpi_rectangle

相关自定义结构体
typedef struct
{
    Point firstPoint;
    Point thirdPoint;
    GLfloat* angle;
    GLboolean* clockwise;
} SGPI_Rectangle;

typedef struct
{
    LineWidth lineWidth;
    Stipple lineStipple;
    GLenum lineCap;
    GLboolean haloing;
    Color haloColor;
    Color outlineColor;
    GLubyte outlineOpacity;
    GLboolean filling;
    Color fillColor;
    GLubyte fillOpacity;
    GLboolean polygonSmooth;
    GLboolean textureControl;
    Texture texture;
    GLboolean modulate;
    GLboolean tessellate;
} PropertyPolygon;

typedef struct
{
    GLfloat x;
    GLfloat y;
} Point;

typedef struct {
    GLfloat line;
    GLfloat halo;
    GLfloat color;
} LineWidth;

typedef struct {
    GLuint* unitSize;
    GLboolean* unitType;
    GLboolean type;
    GLuint count;
} Stipple;

typedef struct
{
    GLubyte red;
    GLubyte green;
    GLubyte blue;
    GLubyte alpha;
} Color;

typedef struct
{
    GLenum horizAlign;
    GLint horizPattern;
    GLenum vertAlign;
    GLint vertPattern;
    GLint id;
} Texture;

相关内部接口函数
GLboolean is_line_smooth()
{
    if (glIsEnabled(GL_LINE_SMOOTH))
    {
        return true;
    }
    else
    {
        return false;
    }
} // is_line_smooth

void DLL_EXPORT sgpi_line_stipple(Stipple stipple)
{
    if (stipple.type)
    {
        if (glIsEnabled(GL_LINE_STIPPLE))
        {
            glDisable(GL_LINE_STIPPLE);
        }
        return;
    }

    if (!glIsEnabled(GL_LINE_STIPPLE))
    {
        glEnable(GL_LINE_STIPPLE);
    }

    GLuint count = stipple.count;
    if (count > 6)
    {
        count = 6;
    }

    GLuint multiple = get_array_gcd(count, stipple.unitSize);
    GLuint proportion = get_array_sum(count, stipple.unitSize) / multiple;
    const GLint PatternSize = 16;
    GLint duplicate = PatternSize / proportion;

    if (duplicate == 0)
    {
        duplicate = 1;
    }

    GLushort num = 0;

    for (GLint i = 1; i <= duplicate; i++)
    {
        for (GLint j = 0; j < count; j++)
        {
            for(GLint k = 1; k <= stipple.unitSize[j] / multiple; k++)
            {
                num <<= 1;
                num +=  stipple.unitType[j];
            }
        }
    }

    glLineStipple(multiple, num);
} // sgpi_line_stipple

void sgpi_line_cap(GLenum lineCap)
{
    if (lineCap == LineCap_Round)
    {
        if (!glIsEnabled(GL_POINT_SMOOTH))
        {
            glEnable(GL_POINT_SMOOTH);
        }
        glHint(GL_POINT_SMOOTH_HINT, GL_NICEST);
    }
} // sgpi_line_cap

void DLL_EXPORT sgpi_line_width(GLfloat lineWidth)
{
    if (!is_GLfloat_more(lineWidth, 0, false, GLfloatValidValue))
    {
        return;
    }
    glLineWidth(lineWidth);
} // sgpi_line_width

void DLL_EXPORT sgpi_rgba_color(Color color)
{
    glColor4ub(color.red, color.green, color.blue, color.alpha);
} // sgpi_rgba_color

void DLL_EXPORT generate_rectangle(
            GLfloat width,
            SGPI_Rectangle input,
            GLboolean filling)
{
    Point secondPoint;
    secondPoint.x = input.thirdPoint.x;
    secondPoint.y = input.firstPoint.y;
    Point fourthPoint;
    fourthPoint.x = input.firstPoint.x;
    fourthPoint.y = input.thirdPoint.y;

    SGPI_Shape shape;
    shape.pointCount = 4;
    Point point[] = {input.firstPoint, secondPoint, input.thirdPoint, fourthPoint};
    shape.point = point;
    shape.angle = input.angle;
    shape.clockwise = input.clockwise;
    generate_shape(width, shape, filling);
} // generate_rectangle

void DLL_EXPORT generate_shape (
            GLfloat width,
            SGPI_Shape input,
            GLboolean filling)
{
    if (input.pointCount == 0)
    {
        return;
    }

    if (!filling)
    {
        generate_lines(input);
        if (is_GLfloat_equal(input.angle[input.pointCount - 1], 0, GLfloatValidValue))
        {
            draw_line(input.point[input.pointCount - 1], input.point[0]);
        }
        else
        {
            ArcSegment arcSegment;
            arcSegment.angle = input.angle[input.pointCount - 1];
            arcSegment.clockwise = input.clockwise[input.pointCount - 1];
            draw_arc_segment(input.point[input.pointCount - 1],
                    input.point[0], arcSegment, false);
        }
    }
    else // filling == true
    {
        fill_shape(width, input);
    } // filling == true
} // generate_shape

void DLL_EXPORT draw_line(
            Point start,
            Point end)
{
    draw_point(start);
    draw_point(end);
} // draw_line

void DLL_EXPORT draw_point(
            Point a)
{
    glVertex2f(a.x, a.y);
} // draw_point

void DLL_EXPORT draw_arc_segment(
            Point start,
            Point end,
            ArcSegment arcSegment,
            GLboolean filling)
{
    if (is_point_equal(start, end))
    {
        draw_point(end);
        return;
    }

    GLfloat angle = arcSegment.angle;
    normalize_angle(&angle);

    if (is_GLfloat_equal(angle, 360, GLfloatValidValue))
    {
        draw_line(start, end);
        return;
    }

    SGPI_Arc arc;
    arc = convert_to_arc(start, end, arcSegment);
    draw_arc(arc, filling);
} // draw_arc_segment

void DLL_EXPORT draw_arc(
            SGPI_Arc arc,
            GLboolean filling)
{
        GLfloat radius = arc.radius;
        if (GLfloatValidValue > radius)
        {
            return;
        }

        Interval angle = arc.angle;
        normalize_angle(&angle.start);
        normalize_angle(&angle.end);
        GLboolean clockwise = arc.clockwise;
        angle.start *= M_PI / 180;
        angle.end *= M_PI / 180;
        Point center = arc.center;

        GLfloat radianAccuracy;
        radianAccuracy = 2.F / (arc.radius * get_screen_max_size());
        GLfloat i;
        if (is_GLfloat_less(angle.start, angle.end, true, GLfloatValidValue))
        {
            if (!clockwise)
                for (i = angle.start; is_GLfloat_less(i, angle.end,
                        true, GLfloatValidValue); i += radianAccuracy)
                    glVertex2f(center.x + radius * cos(i), center.y + radius * sin(i));
            else
            {
                for (i = angle.start; is_GLfloat_more(i, 0,
                        false, GLfloatValidValue); i -= radianAccuracy)
                    glVertex2f(center.x + radius * cos(i), center.y + radius * sin(i));
                for (i = 2 * M_PI; is_GLfloat_more(i, angle.end,
                        true, GLfloatValidValue); i -= radianAccuracy)
                    glVertex2f(center.x + radius * cos(i), center.y + radius * sin(i));
            }
        }
        else // if (is_GLfloat_more(angle.start, angle.end, false, GLfloatValidValue))
        {
            if (!clockwise)
            {
                for (i = angle.start; is_GLfloat_less(i, 2 * M_PI,
                        false, GLfloatValidValue); i += radianAccuracy)
                    glVertex2f(center.x + radius * cos(i), center.y + radius * sin(i));
                for (i = 0; is_GLfloat_less(i, angle.end,
                        true, GLfloatValidValue); i += radianAccuracy)
                    glVertex2f(center.x + radius * cos(i), center.y + radius * sin(i));
            }
            else
                for (i = angle.start; is_GLfloat_more(i, angle.end,
                        true, GLfloatValidValue); i -= radianAccuracy)
                    glVertex2f(center.x + radius * cos(i), center.y + radius * sin(i));
        }
} // draw_arc

void sgpi_line_join(
            GLenum joinStyle,
            GLboolean closeOrOpen,
            const Point* points,
            GLuint pointCount,
            GLfloat edgeLength)
{
    if (pointCount < 3)
    {
        return;
    }

    GLfloat width = 1.F / get_screen_max_size();
    if (is_GLfloat_less(edgeLength, width, false, GLfloatValidValue))
    {
        return;
    }

    if (joinStyle == LineCorner_Bevel)
    {
        fill_linecorner_bevel(closeOrOpen, points, pointCount, edgeLength);
    }
} // sgpi_line_join

调用内部更深层的图形计算与处理算法 - 略
